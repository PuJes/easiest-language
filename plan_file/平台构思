---
  阶段一：项目基础设施搭建 ⚙️

  1.1 Next.js项目初始化

  文件操作：
  - 创建 Next.js 14项目结构
  - 配置 next.config.js（输出standalone模式，适配容器部署）
  - 设置 tsconfig.json（TypeScript配置）
  - 配置 tailwind.config.js（UI样式系统）

  预期结果：完整的Next.js + TypeScript + Tailwind CSS开发环境

  1.2 依赖包安装和配置

  具体操作：
  - 安装核心依赖：@headlessui/react、@heroicons/react、recharts
  - 配置 package.json scripts（dev、build、start）
  - 设置ESLint和Prettier代码规范

  预期结果：所有开发依赖就绪，代码规范配置完成

  1.3 项目目录结构规划

  文件结构：
  src/
  ├── app/                    # Next.js 14 App Router
  │   ├── globals.css        # 全局样式
  │   ├── layout.tsx         # 根布局
  │   ├── page.tsx           # 首页
  │   ├── languages/         # 语言排行榜页面
  │   ├── language/[id]/     # 动态语言详情页
  │   └── tools/             # 交互工具页面
  ├── components/             # 可复用组件
  │   ├── ui/                # 基础UI组件
  │   ├── charts/            # 图表组件
  │   └── forms/             # 表单组件
  ├── lib/                   # 工具函数和数据
  │   ├── data/              # 语言数据
  │   ├── types.ts           # TypeScript类型定义
  │   └── utils.ts           # 工具函数
  └── public/                # 静态资源
      ├── images/            # 图片资源
      └── flags/             # 国旗图标

  预期结果：清晰的文件架构，遵循Next.js最佳实践

  ---
  阶段二：核心数据和类型系统 📊

  2.1 语言数据结构设计

  文件：src/lib/types.ts
  内容：定义Language、Difficulty、LearningResource等类型接口

  2.2 语言学习数据准备

  文件：src/lib/data/languages.ts
  内容：
  - 基于FSI数据的20+主流语言信息
  - 包含难度等级、学习时长、语言特点、推荐资源
  - 针对英语母语者的难度评估

  预期结果：完整的语言学习数据库，支持网站核心功能

  ---
  阶段三：UI组件库开发 🎨

  3.1 基础UI组件

  文件：src/components/ui/
  组件清单：
  - Button.tsx - 统一按钮样式
  - Card.tsx - 信息卡片组件
  - Badge.tsx - 标签徽章
  - Modal.tsx - 弹窗组件

  3.2 布局组件

  文件：
  - src/app/layout.tsx - 全局布局，包含导航和页脚
  - src/components/Navigation.tsx - 响应式导航栏
  - src/components/Footer.tsx - 页脚组件

  设计要求：现代化设计，蓝绿色调，移动端友好

  预期结果：一套完整的UI组件库，确保页面视觉一致性

  ---
  阶段四：核心页面开发 🏠

  4.1 首页 (Landing Page)

  文件：src/app/page.tsx
  功能模块：
  - Hero区域：主标题+语言难度测试CTA
  - 热门语言卡片展示（Top 6最容易学习的语言）
  - 用户成功故事展示
  - 快速导航到其他功能页面

  预期结果：吸引用户的首页，清晰展示网站价值

  4.2 语言排行榜页面

  文件：src/app/languages/page.tsx
  功能模块：
  - 基于FSI数据的语言难度排行表格
  - 筛选功能（按学习时长、语系分类）
  - 可视化图表展示（使用Recharts）
  - 每个语言的快速预览卡片

  4.3 语言详情页（动态路由）

  文件：src/app/language/[id]/page.tsx
  功能模块：
  - 语言基本信息和特点介绍
  - 学习难度详细分析
  - 推荐学习资源链接
  - 学习时间预估计算器
  - 相似语言推荐

  4.4 交互工具页面

  文件：src/app/tools/page.tsx
  功能模块：
  - 个性化语言推荐问卷
  - 学习时间计算器
  - 语言难度对比工具
  - 学习计划生成器

  预期结果：4个功能完整的页面，提供完整用户体验

  ---
  阶段五：交互功能和数据可视化 📈

  5.1 图表组件开发

  文件：src/components/charts/
  组件清单：
  - DifficultyChart.tsx - 难度对比柱状图
  - TimeChart.tsx - 学习时长分布图
  - ComparisonRadar.tsx - 语言特征雷达图

  5.2 交互表单和工具

  文件：src/components/forms/
  功能实现：
  - 语言推荐问卷逻辑
  - 学习时间计算算法
  - 用户输入验证和反馈

  预期结果：丰富的交互体验，增加用户参与度

  ---
  阶段六：性能优化和SEO 🚀

  6.1 性能优化

  优化项目：
  - 图片优化（Next.js Image组件）
  - 字体优化（Google Fonts local加载）
  - 代码分割和懒加载
  - 静态生成优化

  6.2 SEO配置

  文件：各页面的metadata配置
  内容：
  - 页面title和description优化
  - Open Graph和Twitter Card配置
  - 结构化数据标记
  - sitemap.xml生成

  预期结果：快速加载，搜索引擎友好

  ---
  阶段七：容器化和部署配置 🐳

  7.1 Docker配置

  文件：
  - Dockerfile - 多阶段构建配置
  - .dockerignore - 构建优化
  - docker-compose.yml - 本地开发环境

  配置要点：
  - Node.js Alpine基础镜像
  - 生产环境优化构建
  - 端口3000暴露
  - 健康检查配置

  7.2 腾讯云云托管配置

  文件：cloudbase.json
  配置内容：
  - 容器资源配置（0.5核+1GB）
  - 端口和环境变量设置
  - 自动伸缩策略
  - 健康检查路径

  预期结果：完整的容器化部署方案，适配腾讯云云托管

  ---
  阶段八：测试和优化 ✅

  8.1 功能测试

  测试项目：
  - 各页面路由和导航测试
  - 交互功能和表单验证
  - 响应式设计测试
  - 跨浏览器兼容性

  8.2 性能测试

  测试指标：
  - 页面加载速度（<3秒）
  - Core Web Vitals指标
  - 移动端性能评估

  预期结果：稳定运行，用户体验优秀

  ---
  📊 开发里程碑时间节点

  - 第1-2天：基础设施搭建（阶段一、二）
  - 第3-4天：UI组件开发（阶段三）
  - 第5-7天：核心页面开发（阶段四）
  - 第8-9天：交互功能实现（阶段五）
  - 第10天：性能优化和SEO（阶段六）
  - 第11天：容器化配置（阶段七）
  - 第12天：测试和部署（阶段八）

✻ Thinking…

  我已经完成了详细的开发计划制定。现在我需要请求用户批准这个计划才能进入执行阶段
  。根据工作流要求，在开始执行前必须获得用户批准。

⏺ ---
  🎯 计划总结

  项目目标：面向美国用户的语言学习难易度分析平台
  技术方案：Next.js 14 + Tailwind CSS + 腾讯云云托管
  核心功能：4个主要页面，美观UI，语言难度展示和交互工具
  预计工期：12天完整开发周期

  关键特色：
  - 🎨 现代化UI设计，响应式布局
  - 📊 基于FSI权威数据的语言难度分析
  - 🔧 交互式工具（推荐问卷、时间计算器）
  - 🚀 Docker容器化，支持腾讯云一键部署
  - 📈 SEO优化，搜索引擎友好